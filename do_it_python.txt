do it python을 읽으며 모르는 문법 필기
-----------------------------------------------------------------------
>>> a = 3
>>> b = 4
>>> a ** b
81(제곱)  

>>> a = 7
>>> b = 4
>>> a // b
1(소수점을 버리고 정수값만 반환)

>>> a = "python"
>>> a * 2
'pythonpython'(문자열 곱하기)

>>> a = "python"
>>> a[-2]
o(뒤에서 두 번째 문자)
>>> a[0:3]
'pyt'(문자열 인덱스 0,1,2 출력)
>>>a.find('o')  (=index)
4(위치 알려주기)

>>> a = [1,2,3]
>>> a[-1]
3(뒤에서 첫 번째 요소 출력)
>>> del a[1]
>>> a
[1,3](인덱스1 삭제)
>>> a.append(2)
>>> a
[1,3,2](마지막에 2추가)
>>> a.sort()
>>> a
[1,2,3] (정렬)
>>> a.reverse()
>>> a
[3,2,1](뒤집기)

튜플 자료형
-리스트와 거의 비슷
-리스트는 []으로 둘러싸지만 튜플은 ()으로 둘러쌈
-리스트는 그 값의 생성,수정,삭제가 가능하지만 튜플은 그 값을 바꿀 수 없다.
-t2 = (1,)처럼 단지 1개의 요소만을 가질 때는 요소뒤에 콤마(,)를 반드시 붙여야 함

딕셔너리 자료형
{key1:value1,key2:value2}
>>> a = {1:'a','name':'nv1'}
>>> a['na'] = 'nl'
>>> a
{1:'a','name':'nv1','na':'nv1'}
>>> 'name' in a
True (해당 key('name')이 딕셔너리에 있는지 조사)

집합 자료형
-중복 허용X
-순서가 없다
>>> s1 = set("Hello")
>>> s1
{'e','H','l','o'}
>>> l1 = list(s1) 
>>> l1
['e','H','l','o'] (집합을 리스트로 변환)
>>> t1 = tuple(s1)
>>> t1
('e','H','l','o') (집합을 튜플로 변환)

>>> s1 = set([1,2,3,4])
>>> s2 = set([3,4,5,6])
>>> s1 & s2
{3,4} (교집합)
>>> s1.intersection(s2)
{3,4} (교집합)

>>> s1 | s2
{1,2,3,4,5,6} (합집합)
>>> s1.union(s2)
{1,2,3,4,5,6} (합집합)

>>> s1 - s2
{1,2} (차집합)
>>> s1.difference(s2)
{1,2} (교집합)

>>> s1 = set([1,2,3])
>>> s1.add(4)
>>> s1
{1,2,3,4} (값 1개 추가)

>>> s1.update([5,6,7])
>>> s1
{1,2,3,4,5,6,7} (값 여러 개 추가하기)


>>> a = [1,2,3]
>>> b = a               (주소 복사)
>>> c = a[:]            (값 복사)
>>> d = copy(a)         (값 복사)
  
>>> id(a)
430102303
>>> id(b)
430102303
>>> id(c)
304920393
>>> id(d)
239480090

>>> a is b
True
>>> a is c
False

>>> a[1]=4
>>> a
[1,4,3]
>>> b
[1,4,3]
>>> c
[1,2,3]
>>> d
[1,2,3]


>>> a = 3
>>> b = 5
>>> a,b = b,a (a와 b 의값을 바꿈)


>>> if 조건문 :
>>>     수행할 문장
>>> elif 조거문 :
>>>     수행할 문장
>>> else :
>>>     수행할 문장

>>> if score >= 60 :
>>>     print(a)
>>> else :
>>>     print(b)

>>> print(a) if score >= 60 else print(b)     (조건부 표현식)

>>> def say_myselt(name,old,man=True)    (함수에 기본값[man=True]부여 가능)

>>> add = lambda a,b : a+b
>>> result = add(2,3)
>>> print(result)


>>> 파일 객체 = open(파일 이름,파일 열기 모드[r,w,a])



>>> class FourCal:
>>>  def __init__(self,first,second):     (생성자)
>>>     self.first = first
>>>     self.second = second
>>>  def setdata(self,first,second):
>>>     self.first = first
>>>     self.second = second
>>>  def add(self):
>>>      result = self.first + self.second
>>>      return result

>>> a = FourCal(4,2)     (생성자 이용)

>>> b = FourCal()        
>>> FourCal.setdata(b,4,2)

>>> b = FourCal()
>>> b.setdata(4,2)

>>> class MoreFourCal(FourCal):    (상속)
>>>     def pow(self):
>>>     def add(self):             (메서드 오버라이딩)



내장 함수, 정규 표현식

